@startuml

package logic {

    class Bomberman {
        - Area[] : areas
        + linkAreas()
        + restartAreas()
    }
    class Area {
        - mapDirection: String
        - completed: boolean
        - nextLevel: Level
        - player: Player
        + startLevel(controls: KeyDetector)
        + stop(): void
        + finish(): void
    }

    class FileManager {
        - file: File
        - fileData: ArrayList<String>
        - scores: ArrayList<int>
        + saveName(name: String, score: int): void
        + saveScore(score: int): void
        + writeScores(limit: int): void
        + readFile(): ArrayList<String>
        + getHighScore(): int
        + saveLevel(level: Level): void
        + loadLevel(): Level
    }

    abstract class Character <<Runnable>>{
        # positionX: int
        # positionY: int
        # direction: String
        # spriteDirection: String
        + run(): void
        + update(): void
        + move(direction: String, speed: int): void
        + isColliding(): boolean
        + canMove(newDirection: String): boolean
        + needToGoOppositeDirection(currentDirection: String, newDirection: String): boolean
    }

    abstract class Enemy {
        # lastDirection: String
        # speed: int
        + chase(): void
        + teleport(): void
        + getOptimalMovement(lastDirection: String): String
        + getRandomDirection(lastDirection: String): String
    }

    class Player {
        - lastDirection: String
        - score: int
        - getItem(): void
        - getMovement(): String
    }

    class Bomb {
        - timeToExplode: int
        - explosionRadius: int
        + explode(): void
        + setTimeToExplode(time: int): void
        + setExplosionRadius(radius: int): void
    }

    enum Key {
        UP
        DOWN
        RIGHT
        LEFT
    }

    class Bayon {
    }

    class Ballom {
    }

    class Nagacham {
    }

    class Terupyo {
    }

    class Map {
        - map: int[][]
        - loadMap(): void
        + getMapValue(row: int, column: int): int
    }
}

package presentation {
    abstract class GraphicInterface {
        - panel: GamePanel
        + run(): void
        + getSprite(): void
    }

    class KeyDetector <<KeyListener>>{
        direction: String
        keyTyped(e: KeyEvent): void
    }

    class Scoreboard{
        - archivo : File
        + showScores() : void
    }

    class EnemyGraphicInterface {
    - enemies : Enemy
    - bufferedImages
    - update() : boolean
    }


    class PlayerGraphicInterface {
    }

    class FrameGraphicInterface {
    - player : Player
    - map : Map
    - font : Font
    + updateImages() : void
    }

    class MapGraphicInterface <<Runnable>>{
    - pause() :  void
    - quitPause() : void
    }

    class MenuPanel {
    + putButtons()
    + configureButtons()
    }

    class InterfaceManager{

    - controls: KeyDetector
    - area: Area
    start(level: Level): void
    configureButton(): void
    resume(): void
    pauseInterface(): void
    }
}

package logic.powerUps {

    abstract class PowerUp {
        # positionX: int
        # positionY: int
        + applyPowerUp(player: Player): void
    }

    class FireUp {
    }

    class SpeedUp {
    }

    class RemoteControl {
    }
}


EnemyGraphicInterface -l-|> GraphicInterface
FrameGraphicInterface --|> GraphicInterface
PlayerGraphicInterface --|> GraphicInterface
MapGraphicInterface --|> GraphicInterface


MenuPanel --> Scoreboard
MenuPanel --> GraphicInterface
MenuPanel --> InterfaceManager
presentation ..> logic



Ballom --|> Enemy
Bayon --|> Enemy
Terupyo --|> Enemy
Nagacham --|> Enemy


Area --> "1" Player
Area --> "1..4" Enemy
Area --> "1" Map
Character --> Map
Character --> Key


Bomberman --> Area
Player --|> Character
Player --> FileManager
Enemy -l-|> Character
InterfaceManager -->  KeyDetector: controls
Player --> "*" PowerUp: power-ups
PowerUp <|-- FireUp
PowerUp <|-- SpeedUp
PowerUp <|-- RemoteControl
Player .l.> Bomb

@enduml
